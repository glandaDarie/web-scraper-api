Making the decision to use Express.js for the backend and Vue.js for the frontend was a leap out of my comfort zone. While I had substantial experience with Express.js in previous personal projects, Vue.js was relatively new to me. This venture was a great opportunity to expand my horizons and explore the capabilities of both frameworks.

For the scraping part, I ventured into uncharted territory. I had never used Puppeteer before, but having previous experience in webscraping with Python using Selenium and BeautifulSoup. This prior experience provided me with a solid foundation and helped me quickly grasp the intricacies of the Puppeteer library.

The standout feature was the implementation of the Lottie animation on the frontend side. This addition was aimed at enhancing the visual appeal of the application and making it more engaging for users. It reflects my commitment to delivering a user-friendly and visually pleasing interface.

For sentiment analysis, I implemented a classical, robust algorithm using a corpus downloaded from Kaggle, which contains lists of positive and negative words. This algorithm iterates through the given text tokens of the author to determine if the text is positive, negative, or neutral. If I had to build a more robust algorithm, I would have used a prebuilt machine learning model with pre-trained parameters. My focus there would be on fine-tuning the model for this specific task while keeping the weights at the start layers of the RNN model frozen. This would enable more accurate sentiment analysis which would in parallel generalize new posts better.